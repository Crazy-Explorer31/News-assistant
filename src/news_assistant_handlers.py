from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import ContextTypes

from news_filter import get_filtered_news
from news_reader import get_joined_news, get_news

# –¢–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã
channels = []

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ---> –∫–æ–¥—ã
categories = {
    "–û–±—â–µ—Å—Ç–≤–æ / –†–æ—Å—Å–∏—è" : 0,
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞" : 1,
    "–°–∏–ª–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã" : 2,
    "–ë—ã–≤—à–∏–π –°–°–°–†" : 3,
    "–°–ø–æ—Ä—Ç" : 4,
    "–ó–¥–æ—Ä–æ–≤—å–µ" : 5,
    "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ" : 6,
    "–¢—É—Ä–∏–∑–º" : 7
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ---> –≤—ã–±—Ä–∞–Ω—ã –ª–∏
choosen_categories = {
    "–û–±—â–µ—Å—Ç–≤–æ / –†–æ—Å—Å–∏—è" : True,
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞" : True,
    "–°–∏–ª–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã" : True,
    "–ë—ã–≤—à–∏–π –°–°–°–†" : True,
    "–°–ø–æ—Ä—Ç" : True,
    "–ó–¥–æ—Ä–æ–≤—å–µ" : True,
    "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ" : True,
    "–¢—É—Ä–∏–∑–º" : True
}

# –°–º–µ—à–Ω—è—Ñ–∫–∞
status_emoji = {
    True : "‚úÖ",
    False : "‚ùå"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_start_keyboard():
    keyboard = [
        ["–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã", "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã"],
        ["–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–Ω–∞–ª—ã", "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_categories_keyboard():
    choosen_categories_info = list(choosen_categories.items())
    keyboard =  [[status_emoji[is_choosen] + ' ' + category for category, is_choosen in choosen_categories_info[:4]]]
    keyboard += [[status_emoji[is_choosen] + ' ' + category for category, is_choosen in choosen_categories_info[4:]]]
    keyboard[-1] += ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=get_start_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã"
async def add_channels(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω @pitlive, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ pitlive):",
        reply_markup=ReplyKeyboardRemove(),
    )
    context.user_data["action"] = "add"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã"
async def remove_channels(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É–¥–∞–ª—è–µ—Ç–µ @pitlive, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ pitlive):",
        reply_markup=ReplyKeyboardRemove(),
    )
    context.user_data["action"] = "remove"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–Ω–∞–ª—ã"
async def view_channels(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if channels:
        await update.message.reply_text(
            f'–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: {", ".join(channels)}'
        )
    else:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"
async def get_news_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    news = await get_news(channels)  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    news = get_filtered_news(news)
    news = get_joined_news(news)
    await update.message.reply_text(news, disable_web_page_preview=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
async def change_current_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_categories_keyboard(),
    )
    context.user_data["action"] = "categories_change"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    action = context.user_data.get("action")
    if action == "add":
        new_channels = update.message.text.split()
        if new_channels:
            channels.extend(new_channels)
            await update.message.reply_text(
                f'–ö–∞–Ω–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: {", ".join(new_channels)}',
                reply_markup=get_start_keyboard(),
            )
        else:
            await update.message.reply_text(
                "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–∞–Ω–∞–ª—ã.", reply_markup=get_start_keyboard()
            )
        context.user_data["action"] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    elif action == "remove":
        channels_to_remove = update.message.text.split()
        removed_channels = [
            channel for channel in channels_to_remove if channel in channels
        ]
        for channel in removed_channels:
            channels.remove(channel)
        if removed_channels:
            await update.message.reply_text(
                f'–ö–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã: {", ".join(removed_channels)}',
                reply_markup=get_start_keyboard(),
            )
        else:
            await update.message.reply_text(
                "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_start_keyboard()
            )
        context.user_data["action"] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    elif action == "categories_change":
        change_command = update.message.text.split()[1:]
        change_command = ' '.join(change_command)

        if change_command == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
            context.user_data["action"] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.", reply_markup=get_start_keyboard())

        elif change_command in choosen_categories.keys():
            changed_status = not choosen_categories[change_command]
            choosen_categories[change_command] = changed_status
            changed_status_msg = "–¥–æ–±–∞–≤–ª–µ–Ω–∞" if changed_status else "—É–¥–∞–ª–µ–Ω–∞"
            await update.message.reply_text(
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è *{change_command}* {changed_status_msg}",
                parse_mode='Markdown',
                reply_markup=get_categories_keyboard(),
            )

        else:
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –º–µ–Ω—é!",
                reply_markup=get_categories_keyboard(),
            )
            print(change_command, "failed")
            
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    if text == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã":
        await add_channels(update, context)
    elif text == "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã":
        await remove_channels(update, context)
    elif text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–Ω–∞–ª—ã":
        await view_channels(update, context)
    elif text == "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏":
        await get_news_command(update, context)
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
        await change_current_categories(update, context)
